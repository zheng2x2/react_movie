{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synopsis","map","g","i","key","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","a","_callApi","movies","setState","fetch","then","res","json","data","catch","err","console","log","_renderMovies","m","title_english","medium_cover_image","id","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4VAwCA,SAASA,EAAT,GAAqC,IAAfC,EAAc,EAAdA,OAAQC,EAAM,EAANA,IAC1B,OACI,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,kBAI1D,SAASC,EAAT,GAA8B,IAATC,EAAQ,EAARA,MACjB,OACI,0BAAMF,UAAU,gBAAgBE,EAAhC,KAiBOC,MA7Cf,YAAoD,IAAnCJ,EAAkC,EAAlCA,MAAOH,EAA2B,EAA3BA,OAAQQ,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,SACpC,OACI,yBAAKL,UAAU,SACX,yBAAKA,UAAU,kBACf,kBAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,KAElC,yBAAKC,UAAU,kBACX,4BAAKD,GACL,yBAAKC,UAAU,iBACVI,EAAOE,KAAI,SAACC,EAAGC,GAAJ,OAAU,kBAACP,EAAD,CAAYC,MAAOK,EAAGE,IAAKD,QAErD,yBAAKR,UAAU,mBACX,kBAAC,IAAD,CAAcU,KAAML,EAAUM,QAAQ,IAAIC,SAAS,OACvCC,WAAS,EAACC,QAAQ,gBC2CnCC,E,2MArEbC,MAAQ,G,EAiCRC,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLC,EADK,OAEX,EAAKC,SAAS,CACZD,OAASA,IAHA,2C,EAObD,SAAW,WACT,OAAOG,MAAM,yDACZC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKN,UACvBO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAG5BG,cAAgB,WASd,OARe,EAAKf,MAAMI,OAAOd,KAAI,SAAA0B,GACnC,OAAO,kBAAC,EAAD,CAAOjC,MAAOiC,EAAEC,cACTrC,OAAQoC,EAAEE,mBACVzB,IAAKuB,EAAEG,GACP/B,OAAQ4B,EAAE5B,OACVC,SAAU2B,EAAE3B,e,mFAnC5B+B,KAAKnB,e,+BAyCE,IACAG,EAAUgB,KAAKpB,MAAfI,OACP,OACE,yBAAKpB,UAAWoB,EAAS,MAAQ,gBAC9BgB,KAAKpB,MAAMI,OAASgB,KAAKL,gBAAkB,mB,GAhElCM,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.7ae6394d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport PropTypes from 'prop-types';\r\nimport LineEllipsis from 'react-lines-ellipsis';\r\n\r\n// class Movie extends React.Component {\r\n//     static propTypes = {\r\n//         title : PropTypes.string.isRequired,\r\n//         poster : PropTypes.string.isRequired\r\n//     }\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 <MoviePoster poster={this.props.poster} />\r\n//                 <h1>{this.props.title }</h1>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nfunction Movie ({title, poster, genres, synopsis}) {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Columns\">\r\n            <MoviePoster poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1>{title }</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((g, i) => <MovieGenre genre={g} key={i}/> )}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                    <LineEllipsis text={synopsis} maxLine='4' ellipsis=' ...'\r\n                                trimRight basedOn='letters' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}) {\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}) {\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre} </span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n    genres : PropTypes.array.isRequired,\r\n    synopsis : PropTypes.string.isRequired\r\n}\r\nMoviePoster.propTypes = {\r\n    poster : PropTypes.string.isRequired,\r\n    alt : PropTypes.string.isRequired\r\n}\r\nMovieGenre.propTypes = {\r\n    genre : PropTypes.string.isRequired\r\n}\r\nexport default Movie;","import React from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n\n// function App() {\nclass App extends React.Component {\n  state = {\n  //   movies : [\n  //     {\n  //       title : \"Matrix\",\n  //       poster : \"https://placeimg.com/200/300/1\"\n  //     },\n  //     {\n  //       title : \"Full Metal Jacket\",\n  //       poster : \"https://placeimg.com/200/300/2\"\n  //     },\n  //     {\n  //       title : \"Star Wars\",\n  //       poster : \"https://placeimg.com/200/300/4\"\n  //     }\n  //   ]\n  }\n\n  componentDidMount(){\n    this._getMovies()\n    \n    // setTimeout(() => {\n    //   this.setState({\n    //     movies : [\n    //       // ...this.state.movies,\n    //       {\n    //         title : \"Frozen\",\n    //         poster : \"https://placeimg.com/200/300/5\"\n    //       }\n    //     ]\n    //   })\n    // }, 3000)\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies : movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=rating')\n    .then(res => res.json())\n    .then(json => json.data.movies )\n    .catch(err => console.log(err))\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(m => {\n      return <Movie title={m.title_english} \n                    poster={m.medium_cover_image} \n                    key={m.id} \n                    genres={m.genres}\n                    synopsis={m.synopsis}\n              />\n    });\n    return movies;\n  }\n  \n  render(){\n    const {movies} = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : 'Loading ...'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}